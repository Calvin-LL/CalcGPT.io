---
import { colorLuminance } from "../helpers";
import type { HexColor } from "../types/CssColor";

interface Props {
  lightShadowColor: HexColor;
  lightGradientColor: HexColor;
  lightTextColor: HexColor;
  lightColorDifference: number;

  darkShadowColor: HexColor;
  darkGradientColor: HexColor;
  darkTextColor: HexColor;
  darkColorDifference: number;

  textFontSizeOverride?: string;

  class?: string;

  id?: string;
  small?: boolean;
  mini?: boolean;

  disabled?: boolean;
  padding?: boolean;
}

const {
  lightShadowColor,
  lightGradientColor,
  lightTextColor,
  lightColorDifference,

  darkShadowColor,
  darkGradientColor,
  darkTextColor,
  darkColorDifference,

  textFontSizeOverride,

  class: className,

  small = false,
  mini = false,

  disabled = false,
  padding = false,

  ...props
} = Astro.props;

// light theme
const darkLightShadowColor = colorLuminance(
  lightShadowColor,
  lightColorDifference * -1
);
const lightLightShadowColor = colorLuminance(
  lightShadowColor,
  lightColorDifference
);

const darkLightGradientColor = colorLuminance(lightGradientColor, -0.1);
const lightLightGradientColor = colorLuminance(lightGradientColor, 0.07);

// dark theme
const darkDarkShadowColor = colorLuminance(
  darkShadowColor,
  darkColorDifference * -1
);
const lightDarkShadowColor = colorLuminance(
  darkShadowColor,
  darkColorDifference
);

const darkDarkGradientColor = colorLuminance(darkGradientColor, -0.1);
const lightDarkGradientColor = colorLuminance(darkGradientColor, 0.5);
---

<button
  {...props}
  class:list={[{ small, mini, padding }, className]}
  disabled={disabled}
>
  <slot />
</button>

<style
  lang="scss"
  define:vars={{
    darkLightShadowColor,
    lightLightShadowColor,
    darkLightGradientColor,
    lightLightGradientColor,

    darkDarkShadowColor,
    lightDarkShadowColor,
    darkDarkGradientColor,
    lightDarkGradientColor,

    darkTextColor,
    lightTextColor,

    textFontSizeOverride,
  }}
>
  button {
    --fontSize: var(--textFontSizeOverride, calc(var(--buttonSize) / 2.3));
    --color: var(--lightTextColor);
    --lightShadowColor: var(--lightLightShadowColor);
    --darkShadowColor: var(--darkLightShadowColor);
    --lightGradientColor: var(--lightLightGradientColor);
    --darkGradientColor: var(--darkLightGradientColor);

    @media (prefers-color-scheme: dark) {
      --color: var(--darkTextColor);
      --lightShadowColor: var(--lightDarkShadowColor);
      --darkShadowColor: var(--darkDarkShadowColor);
      --lightGradientColor: var(--lightDarkGradientColor);
      --darkGradientColor: var(--darkDarkGradientColor);
    }

    touch-action: manipulation;

    position: relative;
    z-index: 1;

    appearance: none;
    border: none;
    padding: 0;
    margin: 0;

    cursor: pointer;
    user-select: none;
    -webkit-touch-callout: none;
    -webkit-user-select: none;

    display: flex;
    justify-content: center;
    align-items: center;

    min-width: var(--buttonSize);
    min-height: var(--buttonSize);
    border-radius: var(--buttonBorderRadius);
    box-shadow:
      var(--shadowOffset) var(--shadowOffset) var(--blurRadius)
        var(--darkShadowColor),
      calc(var(--shadowOffset) * -1) calc(var(--shadowOffset) * -1)
        var(--blurRadius) var(--lightShadowColor);

    font-family: inherit;
    font-feature-settings: inherit;
    font-size: var(--fontSize);
    color: var(--color);

    background: linear-gradient(
      135deg,
      var(--lightGradientColor),
      var(--darkGradientColor)
    );

    transition-property: box-shadow, opacity;
    transition-duration: 150ms;
    transition-timing-function: ease-in-out;

    &.small {
      --fontSize: var(--textFontSizeOverride, calc(var(--buttonSize) / 4));
      --minSize: calc(var(--buttonSize) * 0.75);

      min-width: var(--minSize);
      min-height: var(--minSize);
    }

    &.mini {
      --fontSize: var(--textFontSizeOverride, calc(var(--buttonSize) / 4));
      --minSize: calc(var(--buttonSize) * 0.5);

      min-width: var(--minSize);
      min-height: var(--minSize);
    }

    &.padding {
      padding-left: calc(var(--minSize) / 2);
      padding-right: calc(var(--minSize) / 2);
    }

    &:disabled {
      cursor: not-allowed;
      opacity: 0.5;
      box-shadow: none;
    }

    &::before {
      position: absolute;
      z-index: -1;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;

      content: "";

      background: linear-gradient(
        135deg,
        var(--darkGradientColor),
        var(--lightGradientColor)
      );

      border-radius: var(--buttonBorderRadius);

      transition: opacity 150ms ease-in-out;

      opacity: 0;
    }

    &:disabled::before {
      opacity: 0.5;
    }

    &:not(:disabled) {
      @media (hover: hover) {
        &:hover::before {
          opacity: 0.5;
        }
      }

      &:active::before {
        opacity: 1;
      }
    }
  }
</style>
